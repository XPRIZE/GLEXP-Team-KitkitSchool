import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        applicationId "com.maq.xprize.booktest"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 5
        versionName "3.2.0"

        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'cocos2dcpp'
                    arguments 'NDK_TOOLCHAIN_VERSION=4.9'
                    arguments 'APP_PLATFORM=android-'+PROP_APP_PLATFORM
                    
                    def module_paths = [project.file("../../cocos2d").absolutePath,
                                        project.file("../../cocos2d/cocos").absolutePath,
                                        project.file("../../cocos2d/external").absolutePath]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        // should use '/'
                        module_paths = module_paths.collect {it.replaceAll('\\\\', '/')}
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }
                    
                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
                }
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    sourceSets {
        main {
            manifest.srcFile 'main/AndroidManifest.xml'
            java.srcDirs = ["src"]
            res.srcDirs = ["res"]
            assets.srcDirs = ['../../../mainapp/Resources/bookviewer']
        }

        release {
            manifest.srcFile 'release/AndroidManifest.xml'
        }

        debug {
            manifest.srcFile 'debug/AndroidManifest.xml'
        }



        general {
            assets.srcDirs       = ['../../../mainapp/Resources/bookviewer', '../../../mainapp/Resources/Localized/en-US/Games/Books', '../../../mainapp/Resources/Localized/sw-TZ/Games/Books']
        }

        noresource {
            assets.srcDir "assets"
        }

        english {
            assets.srcDirs       = ['../../../mainapp/Resources/bookviewer', '../../../mainapp/Resources/Localized/en-US/Games/Books']
        }

        swahili {
            assets.srcDirs       = ['../../../mainapp/Resources/bookviewer', '../../../mainapp/Resources/Localized/sw-TZ/Games/Books']
        }

    }


    productFlavors {
        general {

        }

        noresource {
        }

        english {
        }

        swahili {

        }
    }

    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {

        debug {
            storeFile file('../debug.keystore')
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')
    compile project(':kitkitlogger')
//    Used by Library
    compile 'com.android.support.constraint:constraint-layout:1.1.3'
    compile 'com.android.support:support-v13:25.1.0'
    compile 'com.android.support:appcompat-v7:25.1.0'
    compile 'com.android.support:percent:25.1.0'
    compile 'com.android.support:design:25.1.0'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile project(':kitkitlogger')
    compile project(path: ':downloader_library')
}